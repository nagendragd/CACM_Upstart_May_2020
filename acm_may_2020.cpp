#include <iostream>
using namespace std;
#include <bitset>

double duration(uint64_t n)
{
    if (n == 0) return 0;
    if ((n & 0x1) == 0) return 0;

    double s = 0;
    uint64_t t = n;
    uint64_t n1s = 0;
    uint64_t n0s = 0;

#if 1
    while (t)
    {
        if (t & 0x1)
        {
            n1s ++;
        }
        else
        {
            n0s ++;
        }
        t = t >> 1;
    }

    s = 2* n0s + n1s; 

#else
    t = t >> 1;
    
    while (t)
    {
        if (t & 0x1) s += 1.0;
        else s+= 2.0;
        t = t >> 1;
    }

#endif
    //cout << "Duration of " << std::bitset<64>(n) << " is " << s << endl;
    return s;
}

bool unique(uint64_t * arr, uint64_t n)
{
    for (int i=0;i<n;i++)
    {
        for (int j=i+1;j<n;j++)
        {
            if (arr[i] == arr[j]) return false;
        }
    }
    return true;
}

uint64_t given_solution[] =
{
    1,
    3,
    5,
    7,
    13,
    11,
    15,
    29,
    27,
    23,
    21,
    31,
    61,
    59,
    55,
    47,
    53,
    45,
    43,
    63,
    125,
    123,
    119,
    111
};

uint64_t * shasha_solution;

uint64_t mohiuddin_solution [] = {
/*
['1', '11', '111', '101', '1111', '1011', '1101', '11111', '10111', '11011', '11101', '10101', '111111', '101111', '110111', '111011', '101011', '111101', '101101', '110101', '1111111', '1011111', '1101111', '1110111', '1010111', '1111011', '1011011', '1101011', '1111101', '1011101', '1101101', '1110101', '1010101', '11111111', '10111111', '11011111', '11101111', '10101111', '11110111', '10110111', '11010111', '11111011', '10111011', '11011011', '11101011', '10101011', '11111101', '10111101', '11011101', '11101101', '10101101', '11110101', '10110101', '11010101', '111111111', '101111111', '110111111', '111011111', '101011111', '111101111', '101101111', '110101111', '111110111', '101110111', '110110111', '111010111', '101010111', '111111011', '101111011', '110111011', '111011011', '101011011', '111101011', '101101011', '110101011', '111111101', '101111101', '110111101', '111011101', '101011101', '111101101', '101101101', '110101101', '111110101', '101110101', '110110101', '111010101', '101010101', '1111111111', '1011111111', '1101111111', '1110111111', '1010111111', '1111011111', '1011011111', '1101011111']
*/
    1, 3, 7, 5, 15, 11, 13, 31,
    23, 29, 21, 63, 47, 55, 59, 43,
    61, 45, 53, 127, 95, 111, 119, 87,
    123, 91, 107, 125, 93, 109, 117, 85,
    255, 191, 223, 239, 175, 247, 183, 215,
    251, 187, 219, 235, 171, 253, 189, 221,
    237, 173, 245, 181, 213, 511, 383, 447,
    479, 351, 495, 367, 431, 503, 375, 439,
    471, 343, 507, 379, 443, 475, 347, 491,
    363, 427, 509, 381, 445, 477, 349, 493,
    365, 429, 501, 373, 437, 469, 341, 1023,
    767, 895, 959, 703, 991, 735, 863, 27
};

uint64_t mohiuddin_improved_solution [] = {
/*
['1', '11', '111', '101', '1111', '1011', '1101', '11111', '10111', '11011', '11101', '10101', '111111', '101111', '110111', '111011', '101011', '111101', '101101', '110101', '1111111', '1011111', '1101111', '1110111', '1010111', '1111011', '1011011', '1101011', '1111101', '1011101', '1101101', '1110101', '1010101', '11111111', '10111111', '11011111', '11101111', '10101111', '11110111', '10110111', '11010111', '11111011', '10111011', '11011011', '11101011', '10101011', '11111101', '10111101', '11011101', '11101101', '10101101', '11110101', '10110101', '11010101', '111111111', '101111111', '110111111', '111011111', '101011111', '111101111', '101101111', '110101111', '111110111', '101110111', '110110111', '111010111', '101010111', '111111011', '101111011', '110111011', '111011011', '101011011', '111101011', '101101011', '110101011', '111111101', '101111101', '110111101', '111011101', '101011101', '111101101', '101101101', '110101101', '111110101', '101110101', '110110101', '111010101', '11111111111', '1111111111', '1011111111', '1101111111', '1110111111', '1010111111', '1111011111', '1011011111', '1101011111']
*/
    1, 3, 7, 5, 15, 11, 13, 31,
    23, 29, 21, 63, 47, 55, 59, 43,
    61, 45, 53, 127, 95, 111, 119, 87,
    123, 91, 107, 125, 93, 109, 117, 85,
    255, 191, 223, 239, 175, 247, 183, 215,
    251, 187, 219, 235, 171, 253, 189, 221,
    237, 173, 245, 181, 213, 511, 383, 447,
    479, 351, 495, 367, 431, 503, 375, 439,
    471, 343, 507, 379, 443, 475, 347, 491,
    363, 427, 509, 381, 445, 477, 349, 493,
    365, 429, 501, 373, 437, 469, 2047, 1023,
    767, 895, 959, 703, 991, 735, 863, 27
};

bool valid(uint64_t n)
{
    if (n == 0) return false;
    if ((n & 0x1) == 0) return false;

    uint64_t t = n;
    bool consec_0s = false;

    while (t)
    {
        if (consec_0s)
        {
            if ((t & 0x1) == 0) return false;
        }
        if (t & 0x1) consec_0s = false;
        else consec_0s = true;
        t = t >> 1;
    }

    return true;
}

int main()
{
    // generate 96 unique binary numbers
    // with the property that each one starts and ends in a 1
    // and no number should have more than one consecutive gap (0)

    uint64_t i;
    int count = 0;
    uint64_t *list = new uint64_t [96];
    
    i=1;
    while (count < 96)
    {
        if (valid(i)) list[count++] = i;
        i++;
    }
    if (unique(list, 96) == false) {
        cout << "List is not unique! " << endl;
    }

    // verify Shasha solution
    shasha_solution = new uint64_t [96];
    int j=0;
    for (i=0;i <sizeof(given_solution)/sizeof(given_solution[0]); i++)
    {
        shasha_solution[j++] = ((given_solution[i] << 2) + 1);
        shasha_solution[j++] = ((given_solution[i] << 3) + 3);
        shasha_solution[j++] = ((given_solution[i] << 4) + 7);
        shasha_solution[j++] = ((given_solution[i] << 5) + 15);
    }
    if (unique(shasha_solution, 96) == false) {
        cout << "Shasha solution is not unique! " << endl;
    }

    // verify Mohi solution.
    if (unique(mohiuddin_solution, 96) == false) {
        cout << "Mohiuddin solution is not unique! " << endl;
    }
    
    // verify Mohi improved solution.
    if (unique(mohiuddin_improved_solution, 96) == false) {
        cout << "Mohiuddin improved solution is not unique! " << endl;
    }

    cout << "Basic, Shasha, Mohiuddin, Best-so-far" << endl;
    double b_avg, s_avg, m_avg, i_avg;
    b_avg = s_avg = m_avg = i_avg = 0.0;
    for (i=0;i<96; i++)
    {
        cout << list[i] << ", " << shasha_solution[i] << ", " << mohiuddin_solution[i] << ", " << mohiuddin_improved_solution[i] << endl;
        b_avg += duration(list[i]);
        s_avg += duration(shasha_solution[i]);
        m_avg += duration(mohiuddin_solution[i]);
        i_avg += duration(mohiuddin_improved_solution[i]);
    }
    b_avg/= 96.0;
    s_avg/= 96.0;
    m_avg/= 96.0;
    i_avg/= 96.0;
    cout <<b_avg <<", "<<s_avg <<", "<< m_avg <<", " << i_avg << endl;

    delete [] list;
    delete [] shasha_solution;
}
